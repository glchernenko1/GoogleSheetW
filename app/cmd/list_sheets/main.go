package main

import (
	"GoogleSheetW/internal/services/googleAPI"
	"bufio"
	"context"
	"fmt"
	"google.golang.org/api/drive/v3"
	"google.golang.org/api/sheets/v4"
	"log"
	"os"
	"strconv"
	"strings"
)

func main() {
	fmt.Println("=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Google Sheets —Ç–∞–±–ª–∏—Ü–∞–º–∏ ===")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	ctx := context.Background()

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	cred, err := googleAPI.GetCredentials(ctx, "../app/google.json")
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ Drive —Å–µ—Ä–≤–∏—Å–∞
	driveSrv, err := googleAPI.GetDriveService(ctx, cred)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Drive —Å–µ—Ä–≤–∏—Å–∞: %v", err)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ Sheets —Å–µ—Ä–≤–∏—Å–∞
	sheetsSrv, err := googleAPI.GetSheetsService(ctx, cred)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Sheets —Å–µ—Ä–≤–∏—Å–∞: %v", err)
	}

	for {
		// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
		sheetIDMap, err := googleAPI.GetAllSheetIDByName(driveSrv)
		if err != nil {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: %v", err)
		}

		if len(sheetIDMap) == 0 {
			fmt.Println("üìã –¢–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
			return
		}

		fmt.Printf("\nüìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: %d\n\n", len(sheetIDMap))

		// –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–∑—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
		var names []string
		var ids []string

		fmt.Println("‚Ññ  | –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
		fmt.Println("---|------------------")

		i := 1
		for name, id := range sheetIDMap {
			fmt.Printf("%2d | %s\n", i, name)
			names = append(names, name)
			ids = append(ids, id)
			i++
		}

		fmt.Println("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		fmt.Println("1. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ")
		fmt.Println("2. –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")
		fmt.Println("3. –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
		fmt.Println("0. –í—ã—Ö–æ–¥")
		fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ")

		reader := bufio.NewReader(os.Stdin)
		actionStr, _ := reader.ReadString('\n')
		actionStr = strings.TrimSpace(actionStr)

		action, err := strconv.Atoi(actionStr)
		if err != nil {
			fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
			continue
		}

		switch action {
		case 0:
			fmt.Println("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			return

		case 1:
			showTableDetails(names, ids, sheetsSrv)

		case 2:
			deleteTable(names, ids, driveSrv)

		case 3:
			fmt.Println("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü...")
			continue

		default:
			fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		}
	}
}

func showTableDetails(names []string, ids []string, sheetsSrv *sheets.Service) {
	if len(names) == 0 {
		fmt.Println("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
		return
	}

	fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π (1-" + strconv.Itoa(len(names)) + "): ")
	reader := bufio.NewReader(os.Stdin)
	choiceStr, _ := reader.ReadString('\n')
	choiceStr = strings.TrimSpace(choiceStr)

	choice, err := strconv.Atoi(choiceStr)
	if err != nil || choice < 1 || choice > len(names) {
		fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã")
		return
	}

	tableName := names[choice-1]
	tableID := ids[choice-1]

	fmt.Printf("\nüìã –î–µ—Ç–∞–ª–∏ —Ç–∞–±–ª–∏—Ü—ã: %s\n", tableName)
	fmt.Printf("üÜî ID: %s\n", tableID)
	fmt.Printf("üîó –°—Å—ã–ª–∫–∞: https://docs.google.com/spreadsheets/d/%s/edit\n", tableID)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
	spreadsheet, err := sheetsSrv.Spreadsheets.Get(tableID).Do()
	if err != nil {
		fmt.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∞—Ö: %v\n", err)
		return
	}

	fmt.Printf("üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤: %d\n", len(spreadsheet.Sheets))
	if len(spreadsheet.Sheets) > 0 {
		fmt.Println("üìÑ –õ–∏—Å—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ:")
		for i, sheet := range spreadsheet.Sheets {
			fmt.Printf("   %d. %s\n", i+1, sheet.Properties.Title)
		}
	}

	fmt.Println("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
	reader.ReadString('\n')
}

func deleteTable(names []string, ids []string, driveSrv *drive.Service) {
	if len(names) == 0 {
		fmt.Println("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
		return
	}

	fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-" + strconv.Itoa(len(names)) + "): ")
	reader := bufio.NewReader(os.Stdin)
	choiceStr, _ := reader.ReadString('\n')
	choiceStr = strings.TrimSpace(choiceStr)

	choice, err := strconv.Atoi(choiceStr)
	if err != nil || choice < 1 || choice > len(names) {
		fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã")
		return
	}

	tableName := names[choice-1]
	tableID := ids[choice-1]

	fmt.Printf("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É?\n")
	fmt.Printf("üìã –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", tableName)
	fmt.Printf("üÜî ID: %s\n", tableID)
	fmt.Print("‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û! –í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")

	confirmStr, _ := reader.ReadString('\n')
	confirmStr = strings.TrimSpace(strings.ToLower(confirmStr))

	if confirmStr != "yes" {
		fmt.Printf("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ (–≤–≤–µ–¥–µ–Ω–æ: '%s')\n", confirmStr)
		fmt.Println("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
		reader.ReadString('\n')
		return
	}

	fmt.Println("üóëÔ∏è –£–¥–∞–ª—è—é —Ç–∞–±–ª–∏—Ü—É...")

	err = googleAPI.DeleteSpreadsheetByID(driveSrv, tableID)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: %v\n", err)
		fmt.Println("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
		reader.ReadString('\n')
		return
	}

	fmt.Printf("‚úÖ –¢–∞–±–ª–∏—Ü–∞ '%s' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n", tableName)

	fmt.Println("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
	reader.ReadString('\n')
}
